// preprocess.gvpr
// $ gvpr engtelecom.dot -c -f preprocess.gvpr -o saida-ch.dot

// Documentação: https://www.mankier.com/1/gvpr#

BEGIN { 
    int tot_ch = 0;  // carga horaria total do curso
    double tcc_ch = 0; // TCC1 tem como pre-requisito 70% da CH total
    double eto_ch = 0; // ETO tem como pre-requisito 60% da CH total
    int tot_n = 0; int tot_e = 0;

    int totalPorCor[string]; // 8 cores      
    int totalCredPorCor[string];
    string cores[string];

     // Cores dos eixos
    cores["#FFD700"] = "AMARELO";
    cores["#007FFF"] = "AZUL";
    cores["#808080"] = "CINZA";
    cores["#FFA343"] = "LARANJA";
    cores["#9F8170"] = "MARROM";
    cores["#9678B6"] = "ROXO";
    cores["#77DD77"] = "VERDEC";
    cores["#339966"] = "VERDEE";
}

BEG_G {

    node_t no = fstnode($);
    tot_n = nNodes($G);
    tot_e = nEdges($G);

    while (no != NULL){

        int creditos = no.ch/20;

        

       // Só alterar o label que possuem créditos > 0 
        if (creditos > 0){
            no.label = sprintf("%s\n(%d)", no.id, creditos);
        }

        // CH total do curso não contabilizará TCC1, TCC2 e ETO
        if ((strcmp(no.id,"TCC1"))&&(strcmp(no.id,"TCC2"))&&(strcmp(no.id,"ETO")) ){
            tot_ch+=no.ch;
            totalPorCor[no.color]++;
            totalCredPorCor[no.color]+=creditos;
        }

        no = nxtnode(no);
    }
    
    //CEPE 70% da CH atual
    tcc_ch = tot_ch * 0.7;

    //CEPE 60% da CH atual
    eto_ch = tot_ch * 0.6;

    graph_t subgraph = fstsubg($);

    while (subgraph != NULL) {
        int ch_eixo = 0;
        node_t n = fstnode(subgraph);
        while (n != NULL) {
            ch_eixo += n.ch;
            if (strcmp(n.id,"horasTCC") == 0){
                n.label = sprintf("%dh", tcc_ch);
            }
            if (strcmp(n.id,"horasETO") == 0){
                n.label = sprintf("%dh", eto_ch);
            }

            n = nxtnode_sg(subgraph, n);
        }
        subgraph.label = sprintf("%s [%d h] - %d", subgraph.label, ch_eixo,(ch_eixo/20));
        subgraph = nxtsubg(subgraph);
    }
    label = sprintf("%s\n Carga horária total: %d (não inclui ETO, TCC1 e TCC2)",label,tot_ch);
}
END { 
    printf ("\n//Carga horária total: %d \n", tot_ch);
    printf ("//Total de nós: %d \n", tot_n);
    printf ("//Total de arestas: %d \n\n", tot_e);

    string elemento;
    forr(totalPorCor[elemento]){
        string disciplina = sprintf("%d", totalPorCor[elemento]);
        string credito = sprintf("%d", totalCredPorCor[elemento]);;
        if (totalCredPorCor[elemento] > 0){
            if (totalPorCor[elemento] < 10 ){
                disciplina = sprintf("0%d", totalPorCor[elemento]);
            }
            if (totalCredPorCor[elemento] < 10){
                credito = sprintf("0%d", totalCredPorCor[elemento]);;
            }
            printf("// %s:\t\t%s (disciplinas)  -  %s (créditos)\n", cores[elemento], disciplina, credito);
        }
    }
}